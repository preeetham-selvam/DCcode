import groovy.transform.Canonical;
import groovy.json.JsonSlurper;
import groovy.json.JsonOutput; 
import java.text.SimpleDateFormat;
import com.microsoft.azure.storage.*;
import com.microsoft.azure.storage.blob.*;
import java.util.regex.*;
import java.util.Base64;
import java.nio.charset.StandardCharsets;
import java.security.SecureRandom;
import net.lingala.zip4j.core.ZipFile;
import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.model.ZipParameters;
import net.lingala.zip4j.util.Zip4jConstants;



//logger.info(CustomVariables.body.get());

/****** Passed variables */
JsonSlurper JSONSlurper = new JsonSlurper();
jsonSlurper = new JsonSlurper();
SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");
def reqClient= JSONSlurper.parseText(CustomVariables.bodyGetClientId.get());
String user=reqClient.clientId;
icmUser=user.toLowerCase();
def req= JSONSlurper.parseText(CustomVariables.body.get());
CustomVariables.contentType.set("application/json");
String action = CustomVariables.action.get();
ArrayList<String> userGroups=getUserGroups(user.toLowerCase());

boolean isInCorrectGroup=true;
String requiredGroup="AAD-Developers";
isInCorrectGroup= (requiredGroup in userGroups);
requiredGroup="RestApiUser";
if (!isInCorrectGroup) isInCorrectGroup= (requiredGroup in userGroups);
requiredGroup="ART-AAD-Administer";
if (!isInCorrectGroup) isInCorrectGroup= (requiredGroup in userGroups);
if (!isInCorrectGroup && action=="save") {
    CustomVariables.output.set('{"saveStatus":"User is not in correct AD group","verificationStatus":true}');
    logger.warn("User:$reqClient is not in the correct group");
    CustomVariables.contentType.set("application/json");
    return;
}

CustomVariables.output.set('{"reqStatus":"Okay","Records":[],"verificationStatus":true}');
/****** Passed variables */

logger.info("user=$user");
/*** Get Request */

/*** Constants ***/

/****** Passed variables */

Map res = null;
switch(action) {
   case "getlist":
      res= getChangeSetDetail(req);
      break;
   case "deletechangelist":
      res= deleteChangeSets(req);
      break;
   case "setchangesetstatus":
      res = setChangeSetsStatus(req);
      break;
   case "exportchangelist":
      res = exportChangeSets(req);
      break;
   case "importchangelist":
      res= importChangeSets(req);
      break;
   case "viewchangelist":
      res= viewChangeSets(req);
      break;
   case "importicmvars":
      res = importIcmVars(req);
      break;
   case "exporticmvars":
      res = exportIcmVars(req);
      break;
   case "getenvironments":
      res = getEnvironments(req);
      break;
}

CustomVariables.contentType.set("application/json");
res.verificationStatus=true;
CustomVariables.output.set(JsonOutput.toJson(res));


/******************* Get Details of ChangeSets **************************/
Map getChangeSetDetail (Map input){
      /******************* Get changesets **************************/
//   println("Request:"+JsonOutput.prettyPrint(JsonOutput.toJson(input)));
   ChangeSets res2 = new ChangeSets();
   try {
               // Creating a list of tenants to retrieve change sets for. 
         def tenants = [""];

         // Listing approved change sets that have not been exported for the 'PROD' environment yet. 
//         List<IcmChangeSetInfo> changeSets = Icm.listChangeSets("ANY", tenants, input.excludeDestination);
         List<IcmChangeSetInfo> changeSets = Icm.listChangeSets("ANY");

         // Looping through the change sets to print out their IDs and names.  
 //        for (IcmChangeSetInfo changeSet : changeSets) {  
 //           logger.log("Change Set ID: " + changeSet.id)  
 //           logger.log("Display Name: " + changeSet.displayName)  
 //        }
      String changeSetMask = input.changeSetMask;
//      logger.info ("Res1:$changeSets");
      changeSets.each { it->
         if (fitsMask(it.getDisplayName(),changeSetMask)) {
            ChangeSetDetail chg = new ChangeSetDetail();
            chg.name= it.displayName;
            chg.id= it.id;
            chg.description= it.description;
            chg.open = it.status=="OPENED";
            chg.closed= it.status=="CLOSED";
            chg.approved= it.status=="APPROVED";
            chg.rejected = it.status=="REJECTED";
            if ((input.isOpenSelect && chg.open) || (input.isClosedSelect && chg.closed) || (input.isApprovedSelect && chg.approved) || (input.isRejectedSelect && chg.rejected))res2.changeSets.add(chg);
         }
      }
   } catch (Exception e7) {
      logger.info ("Exception ${e7.getMessage()}");
      res2.resultFailure = "Exception ${e7.getMessage()}";
   }   
   return jsonSlurper.parseText(JsonOutput.toJson(res2));
}

/******************* view ChangeSets **************************/
Map viewChangeSets(Map input) {
   /******************* Import change set view method **************************/
   String binaryData = input.fileBinaryData;
   String fileName = input.fileName;
   def results=new ResultSet();
   byte[] hexData = binaryData.substring(binaryData.indexOf("base64,")+7).decodeBase64(); 
   if (fileName.endsWith("zip")) {
      File spool = new File (SystemVariables.'job-dir'.get());
      logger.info("Spooling to:${spool.path}");
      String zipFileDest = spool.path+'/ChangeSets';
      new File(zipFileDest).mkdir();  
      String zipFilePath= spool.path+'/zipfile.zip';
      File zipFile=new File(zipFilePath);
      zipFile.setBytes(hexData);
      unzipFile(zipFilePath, zipFileDest);
      def fileJsonSlurper = new JsonSlurper();
      def changeSetFiles = new ArrayList<File>();
      new File(zipFileDest).eachFileMatch(~/.+\.json$/){file->
         changeSetFiles.add(file);
      }
      def sortedFiles = changeSetFiles.sort{ a,b -> a.getName() <=> b.getName()};
      sortedFiles.each(){file->
         def json = fileJsonSlurper.parse(file);
         json.changesetfiles.each{res->
            ResultSetDetail resultSetDetail = new ResultSetDetail();
            resultSetDetail.result= res.path+"("+res.evaluatedversion+")";
            results.results.add(resultSetDetail);
            println(res.path);
         }
      }
   } else {
      ResultSetDetail resultSetDetail = new ResultSetDetail();
      resultSetDetail.result= "Not a zip file";
      results.results.add(resultSetDetail);
      logger.info("Not a zip file");
   }
   return jsonSlurper.parseText(JsonOutput.toJson(results));
}

/******************* delete ChangeSets **************************/
Map deleteChangeSets(Map input){
   try {
     def changeSetInfo = input.changeSets;
     changeSetInfo.each {
        if (it.selected ) {
           try {
              Icm.removeChangeSet(it.id);
           } catch (Exception e) {
              logger.info ("Exception ${e.getMessage()} occurred");
              input.resultFailure="Exception ${e.getMessage()} occurred";
           }
        }
     }
     changeSetInfo.removeAll { it.selected==true  }
   } catch (Exception e6) {
     logger.info("Exception ${e6.getMessage()}");
     input.resultFailure="Exception ${e6.getMessage()} occurred";
   }  
   return input;
}

/*******************  Modify ChangeSets Status **************************/
Map setChangeSetsStatus(Map input) {
   def changeSetInfo = input.changeSets;
   try {
     String status="";
     if (input.setOpen) status="OPENED";
     if (input.setClosed) status="CLOSED";
     if (input.setApproved) status="APPROVED";
     if (input.setRejected) status="REJECTED";
     changeSetInfo.each {
        if (it.selected ) {
           try {
               Icm.setChangeSetStatus(it.id,status);
              it.open = input.setOpen;
              it.closed = input.setClosed;
              it.approved = input.setApproved;
              it.rejected = input.setRejected;
           } catch (Exception e) {
               logger.info("Exception ${e.getMessage()} occurred");
              input.resultFailure="Exception ${e.getMessage()} occurred";
           }
        }
        it.selected = false;
     }
   } catch (Exception e8) {
     logger.info("Exception ${e8.getMessage()}");
     input.resultFailure="Exception ${e8.getMessage()} occurred";
   }
   return input;   
}

/******************* Export ChangeSets **************************/
Map exportChangeSets(Map input) {
   def changeSetInfo = input.changeSets;
   String destination = (input.destination!=null && input.destination.trim().length()>0)?input.destination:"";
   ExportChangeSets exportChangeSets = new ExportChangeSets();
   try {
      String saveFilepath;
      exportChangeSets.changeSets= input.changeSets;
      File spool = new File(SystemVariables.'job-dir'.get());
      String zipFileDest = spool.path+'/ChangeSets';
      new File(zipFileDest).mkdir();  
      if (input.saveTarget==2) {
         saveFilepath = (input.directoryName!=null && input.directoryName.trim().length()>0 && input.directoryName.startsWith("/"))?input.directoryName:"/data/deploy";
         new File(saveFilepath).mkdir();
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         if (destination !=null && destination.trim().length()>0) {
            saveFilepath += "/$destination";
            new File(saveFilepath).mkdir();
            java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         }  
      }
      changeSetInfo.each {
         if (it.selected && (it.closed || it.approved)) {
            String changeSetId = it.id;
            StringBuilder reportByRef = new StringBuilder();
            ExportChangeSetDetail csd = new ExportChangeSetDetail();
            csd.changeSetName = it.name;
            try {
               InputStream inputStream = exportChangeSet(changeSetId, destination, reportByRef);
//               Map report = new JsonSlurper().parseText(reportByRef.toString());
               Map report=null;
               Map exportJson=jsonSlurper.parseText(Icm.getChangeSetDefinitionJson(changeSetId));
//               logger.info(exportJson);
               int numFiles = (exportJson!=null && exportJson.changesetfiles !=null)?exportJson.changesetfiles.size():0;
      //         println(JsonOutput.prettyPrint(JsonOutput.toJson(report)));
               byte[] hexData = inputStream.readAllBytes();
               csd.fileName= "${it.name}.chs";
               csd.numberOfFiles= numFiles;
               if (input.saveTarget==1) {
                  if (destination !=null && destination.trim().length()>0) {
                     csd.fileName= "${it.name}_${destination}.chs";
                  }
                  csd.exportData = "data:application/octet;base64,"+Base64.getEncoder().encodeToString(hexData);
               } else if (input.saveTarget==2) {
                  String fullSavePath="$saveFilepath/${it.name}.chs";
                  File saveFile =new File(fullSavePath);
                  saveFile.setBytes(hexData);
                  java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(fullSavePath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
                  csd.changeSetName = fullSavePath;
               } else if (input.saveTarget==3) {
                  String fullSavePath="$zipFileDest/${it.name}.chs";
                  File saveFile =new File(fullSavePath);
                  saveFile.setBytes(hexData);
                  csd.changeSetName = fullSavePath;
                  String saveJson= exportChangeSetJson(changeSetId, destination)
                  fullSavePath="$zipFileDest/${it.name}.json";
                  saveFile =new File(fullSavePath);
                  saveFile.setText(saveJson);
               }
            } catch (Exception e) {
               logger.info("Export changeset ${it.name} has exception ${e.getMessage()}");
               csd.message = e.getMessage(); 
            } 
            exportChangeSets.exports.add(csd);
            it.selected = false;
         } else if (it.selected) {
            ExportChangeSetDetail csd = new ExportChangeSetDetail();
            csd.changeSetName = it.name;
            csd.message = "ChangeSet is in incorrect state";
            exportChangeSets.exports.add(csd);
            it.selected = false;
         }
      }
      if (input.saveTarget==3) {
         ArrayList filesToAdd = new ArrayList();
         int countExports=0;
         new File(zipFileDest).eachFile(){file->
            filesToAdd.add(file);
            countExports++;
         } 
         if (countExports>0) {      
            String zipFilePath= spool.path+'/'+input.zip.fileName;
            zipFiles(zipFilePath,filesToAdd);
            File zip = new File(zipFilePath);
            exportChangeSets.zip.fileName=input.zip.fileName;
            exportChangeSets.zip.data = "data:application/zip;base64,"+Base64.getEncoder().encodeToString(zip.getBytes());
         }
      }
   } catch (Exception eFinal) {
      logger.info("Unexpected failure:{eFinal.getMessage()}");
   }
   return jsonSlurper.parseText(JsonOutput.toJson(exportChangeSets));
}

/******************* Export ChangeSet **************************/
InputStream exportChangeSet(String changeSetId , String destination, StringBuilder reportByRef) {
   InputStream response;
    String endpoint= IcmVariables.is.serverUrl.getString();
    endpoint+="/api/content/v1/changesets/$changeSetId/export";
    logger.info("endpoint:$endpoint");
    String out = """{"targetEnvironment": "$destination"}""";
//    key = server."archive-notification-key";
    try {
        con = new URL(endpoint).openConnection();
        con.setConnectTimeout(120000);
        con.setReadTimeout(120000);	
    
        con.setRequestMethod("POST");
        con.setRequestProperty("Content-type", "application/json");
      String authString = IcmVariables.is.interfaceUsername.getString()+":"+IcmVariables.is.interfacePassword.getPassword();
      authString=authString.getBytes().encodeBase64().toString()
      con.setRequestProperty("Authorization", "Basic ${authString}")
//        con.setRequestProperty("Authorization", "Bearer " + AccessTokens."http-input".getValue());
//        logger.info("Bearer " + AccessTokens."http-input".getValue());
        con.setDoOutput(true);
    
        bwr = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));
        logger.info("json call:$out")
//        con.getOutputStream().write(out.getBytes("UTF-8"));
//        builder.writeTo(bwr);
        bwr.write(out);
        bwr.flush();
        bwr.close();
        int responseCode = con.getResponseCode();
        if(responseCode==200) {   
            logger.info("Started");
            response = con.getInputStream();
            logger.info("Ended");
        } else { 
            responseStream = new BufferedReader(new InputStreamReader(con.getErrorStream()));
//            logger.info ("Error from CDMS:" + responseStream.getText());
            logger.warn("user failed search for reason:"+responseStream.getText());
        }
    }  catch (Exception e) {
        logger.info (e);
    }    
    return response;

//   InputStream iStream = icmUtilsAdv.exportChangeSet(changeSetId,destination);
//   reportByRef.append(icmUtilsAdv.getExportReport());
//   return iStream;
}

/******************* Export ChangeSet JSON **************************/
String exportChangeSetJson(String changeSetId , String destination) {
   String result="";
   String resultJson = Icm.getChangeSetDefinitionJson(changeSetId);
   def prettyJson = new JsonSlurper().parseText(resultJson);
   result=JsonOutput.prettyPrint(JsonOutput.toJson(prettyJson)).stripIndent();
   return result;
}

/******************* Import ChangeSets **************************/
Map importChangeSets(Map input) {
   def forceApprovalStateUpdate = input.forceApprovalStateUpdate;
   boolean overWrite = input.overWrite;
   String binaryData = input.fileBinaryData;
   String fileName = input.fileName;
   def results = new ResultSet();
   boolean authorised = true;
   def groups = getUserGroups(icmUser);
      logger.info(groups);
   if (!("ROL-G-Inspire-Manage Releases" in groups) && IcmVariables.Environment.getString().toLowerCase() == "prod") {
      authorised = false;
      results.results.add([result: "You are not authorized to deploy in Production"]);
      logger.info("You are not authorized to deploy in Production");
   }
   if (authorised || true) {
      byte[] hexData = binaryData.substring(binaryData.indexOf("base64,") + 7).decodeBase64();

      if (fileName.endsWith("zip")) {
         def pathValues = "";
         def selectedImpact = "";
         def questionsAndResponses = "";
         def jsonSlurper = new JsonSlurper();
         def changeSetJsonFiles = new ArrayList<File>();
         def allPathValues = new HashSet<String>();
         def taskURL = null;
         def pathVersionMap = [:];
         def processedPaths = new HashSet<String>();
         def processedResults = new HashSet<String>();
         def uniqueResults = [];

         File spool = new File(SystemVariables.'job-dir'.get());
         String zipFileDest = spool.path + '/ChangeSets';
         new File(zipFileDest).mkdir();
         String zipFilePath = spool.path + '/zipfile.zip';
         File zipFile = new File(zipFilePath);
         zipFile.setBytes(hexData);
         unzipFile(zipFilePath, zipFileDest);
         def changeSetFiles = new ArrayList<File>();
         new File(zipFileDest).eachFileMatch(~/.+\.chs$/) { file ->
            changeSetFiles.add(file);
         }
         def sortedFiles = changeSetFiles.sort { a, b -> a.getName() <=> b.getName() };
         sortedFiles.each { file ->
            result = importChangeSet(file.getBytes(), overWrite, forceApprovalStateUpdate,input.fileName);
            result.results.each { res ->
               if (processedResults.add(res.result)) {
                  uniqueResults.add(res);
               }
            }
            results.results.addAll(uniqueResults);
         }   
      } else {
         results = importChangeSet(hexData, overWrite, forceApprovalStateUpdate,input.fileName);
         logger.info(results);
      }
   }
   return jsonSlurper.parseText(JsonOutput.toJson(results));
}

/******************* Import ICM vars **************************/
Map importIcmVars(Map input) {
   String binaryData = input.environmentBinaryData;
   String fileName = input.environmentFileName;
   byte[] hexData = binaryData.substring(binaryData.indexOf("base64,") + 7).decodeBase64();
   String out = new String(hexData);
   InputStream inputStream = new ByteArrayInputStream(hexData);
   String result = null;
   ImportEnvironmentWrap impWrap = new ImportEnvironmentWrap();
      String endpoint= IcmVariables.is.serverUrl.getString();
   endpoint+="/api/content/v1/inspireEnvironments";
   try {
        con = new URL(endpoint).openConnection();
        con.setConnectTimeout(120000);
        con.setReadTimeout(120000);	
    
        con.setRequestMethod("PUT");
        con.setRequestProperty("Content-type", "application/json");
//        con.setRequestProperty("Authorization", "Bearer " + AccessTokens."http-input".getValue())
      String authString = IcmVariables.is.interfaceUsername.getString()+":"+IcmVariables.is.interfacePassword.getPassword();
      authString=authString.getBytes().encodeBase64().toString()
      con.setRequestProperty("Authorization", "Basic ${authString}")
        con.setDoOutput(true);
    
        bwr = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()));
//        logger.info("json call:$out")
//        con.getOutputStream().write(out.getBytes("UTF-8"));
//        builder.writeTo(bwr);
        bwr.write(out);
        bwr.flush();
        bwr.close();
        int responseCode = con.getResponseCode();
        if(responseCode>=200 && responseCode<400) {   
            logger.info("Started");
            logger.info("Ended");
            impWrap.importEnvironmentResult = "Success";
        } else { 
            responseStream = new BufferedReader(new InputStreamReader(con.getErrorStream()));
//            logger.info ("Error from CDMS:" + responseStream.getText());
            logger.warn("user failed search for reason:"+responseStream.getText());
            impWrap.importEnvironmentResult = "Failed";
        }
   } catch (Exception e) {
      logger.info("Import config variables had exception ${e.getMessage()}");
      impWrap.importEnvironmentResult = "Import config variables had exception ${e.getMessage()}";
   }
   return jsonSlurper.parseText(JsonOutput.toJson(impWrap));
}

/******************* Export ICM vars **************************/
Map exportIcmVars(Map input) {
   String saveFilepath;
   String destination = (input.destination != null && input.destination.trim().length() > 0) ? input.destination : "";
   ExportEnvironmentWrap envWrap = new ExportEnvironmentWrap();
   String endpoint= IcmVariables.is.serverUrl.getString();
   endpoint+="/api/content/v1/inspireEnvironments";
   logger.info("endpoint:$endpoint");
   String response = "";
   try {
        con = new URL(endpoint).openConnection();
        con.setConnectTimeout(120000);
        con.setReadTimeout(120000);	
    
        con.setRequestMethod("GET");
        con.setRequestProperty("Content-type", "application/json");
//        con.setRequestProperty("Authorization", "Bearer " + AccessTokens."http-input".getValue())
      String authString = IcmVariables.is.interfaceUsername.getString()+":"+IcmVariables.is.interfacePassword.getPassword();
      authString=authString.getBytes().encodeBase64().toString()
      con.setRequestProperty("Authorization", "Basic ${authString}")
        con.setDoOutput(false);
        int responseCode = con.getResponseCode();
        if(responseCode==200) {   
            logger.info("Started");
            response = con.getInputStream().getText();
            logger.info("Ended");
        } else { 
            responseStream = new BufferedReader(new InputStreamReader(con.getErrorStream()));
//            logger.info ("Error from CDMS:" + responseStream.getText());
            logger.warn("user failed search for reason:"+responseStream.getText());
        }

      byte[] hexData = response.getBytes();
      String isoDate = formatDateISo(new Date());
      envWrap.exportEnvironmentResult.fileName = "environment_${isoDate}.env";
      if (input.saveTargetEnvironment == 1) {
         if (destination != null && destination.trim().length() > 0) {
            envWrap.exportEnvironmentResult.fileName = "environment_${destination}_${isoDate}.env";
         }
         envWrap.exportEnvironmentResult.exportData = "data:application/octet;base64," + Base64.getEncoder().encodeToString(hexData);
         envWrap.exportEnvironmentResult.message = "Success";
      } else if (input.saveTargetEnvironment == 2) {
         saveFilepath = (input.directoryName != null && input.directoryName.trim().length() > 0 && input.directoryName.startsWith("/")) ? input.directoryName : "/data/deploy";
         new File(saveFilepath).mkdir();
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         if (destination != null && destination.trim().length() > 0) {
            saveFilepath += "/$destination";
            new File(saveFilepath).mkdir();
            java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         }
         String fullSavePath = "$saveFilepath/environment_${isoDate}.env";
         File saveFile = new File(fullSavePath);
         saveFile.setBytes(hexData);
         envWrap.exportEnvironmentResult.fileName = fullSavePath;
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(fullSavePath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         envWrap.exportEnvironmentResult.message = "Success";
      }
   } catch (Exception e) {
      logger.info("Export environment variables has exception ${e.getMessage()}");
      envWrap.exportEnvironmentResult.message = e.getMessage();
   }
   return jsonSlurper.parseText(JsonOutput.toJson(envWrap));
}

/******************* get ICM environments **************************/
Map getEnvironments(Map input) {
   JsonSlurper JSONSlurper = new JsonSlurper();
   Environments environments = new Environments();
   String endpoint= IcmVariables.is.serverUrl.getString();
    endpoint+="/api/content/v1/inspireEnvironments/names";
    logger.info("endpoint:$endpoint");
    try {
        con = new URL(endpoint).openConnection();
        con.setConnectTimeout(120000);
        con.setReadTimeout(120000);	
    
        con.setRequestMethod("GET");
        con.setRequestProperty("Content-type", "application/json");
//        con.setRequestProperty("Authorization", "Bearer " + AccessTokens."http-input".getValue())
      String authString = IcmVariables.is.interfaceUsername.getString()+":"+IcmVariables.is.interfacePassword.getPassword();
      authString=authString.getBytes().encodeBase64().toString()
      con.setRequestProperty("Authorization", "Basic ${authString}")
        con.setDoOutput(false);
        int responseCode = con.getResponseCode();
        if(responseCode==200) {   
            logger.info("Started");
            response = con.getInputStream();
            Map responseObj= JSONSlurper.parse(response);
            logger.info(responseObj);
            responseObj.environments.each {
               EnvironmentDetails envDetails = new EnvironmentDetails();
//               logger.info(it);
               envDetails.name = it;
               if (it.toLowerCase() != "prod") {
                  envDetails.host = envDetails.host.replace("<env->", it + "-");
               } else {
                  envDetails.host = envDetails.host.replace("<env->", "");
               }
               environments.environments.add(envDetails);
            }
            logger.info("Ended");
        } else { 
            responseStream = new BufferedReader(new InputStreamReader(con.getErrorStream()));
            logger.warn("user failed search for reason:"+responseStream.getText());
        }
    }  catch (Exception e) {
        logger.info (e);
    }    
    return jsonSlurper.parseText(JsonOutput.toJson(environments));
}
/******************* Import ChangeSets **************************/
ResultSet importChangeSet(byte[] hexData , boolean overWrite, boolean forceApprovalStateUpdate,String filename) {
   InputStream inputStream = new ByteArrayInputStream(hexData);
   JsonSlurper JSONSlurper = new JsonSlurper();
   ResultSet resultMap = new ResultSet();
   String result=null;
   String filesImported='{"files":[]}';
   String boundary= new SecureRandom().nextLong();//"9051914041544843365972754266";
   boundary = "__Part"+boundary;
   String endpoint= IcmVariables.is.serverUrl.getString();
   endpoint+="/api/content/v1/upload/changesets";
   logger.info("endpoint:$endpoint");
   String response;
   def con;
   def responseObj=null;
   boolean handleExistingChainset=true;
   while (handleExistingChainset) {
      try {
         handleExistingChainset=false;
         con = new URL(endpoint).openConnection();
         con.setConnectTimeout(30000);
         con.setReadTimeout(30000);	
         con.setRequestMethod("POST");
         con.setRequestProperty("Content-Type", "multipart/form-data; boundary=\"$boundary\"");
         //      conn.setRequestProperty("Authorization", "Bearer " + AccessTokens."http-input".getValue())
         String authString = IcmVariables.is.interfaceUsername.getString()+":"+IcmVariables.is.interfacePassword.getPassword();
         authString=authString.getBytes().encodeBase64().toString()
         con.setRequestProperty("Authorization", "Basic ${authString}")
         con.setDoOutput(true);
         def byteArrayOutputStream = con.getOutputStream() // new ByteArrayOutputStream();
         //      ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
         byteArrayOutputStream.write("--$boundary\r\n".getBytes())
         String contentType = "application/octet-stream";
         byteArrayOutputStream.write("Content-Type: $contentType\r\n".getBytes())
         byteArrayOutputStream.write("Content-Transfer-Encoding: binary\r\n".getBytes())
         byteArrayOutputStream.write("Content-Disposition: form-data; name=\"changeset\"; filename=\"abc.chs\"\r\n\r\n".getBytes());
         logger.info("Content-Disposition: form-data; name=\"changeset\"; filename=\"changeset.chs\"");
         byteArrayOutputStream.write(hexData);
         byteArrayOutputStream.write("\r\n--${boundary}--\r\n".getBytes());
         byteArrayOutputStream.flush();
         int responseCode = con.getResponseCode();
         logger.info("ResponseCode: $responseCode");
         if(responseCode>=200 && responseCode < 400 ) {   
            response = con.getInputStream().getText();
            responseObj=JSONSlurper.parseText(response);
            logger.info("Imported ChangeSet:${responseObj.id}")
            logger.info("Upload Attachment:$response");
         } else if (responseCode==422) {
            response = con.getErrorStream().getText();
            def responseObj1 = JSONSlurper.parseText(response);
            responseObj1.errors.each{
               if (it.type=="CHANGE_SET_EXISTS" && overWrite) {
                  try {
                     String chgSet1=getChgId(it.relatedResource);
                     Icm.removeChangeSet(chgSet1);
                     logger.info("Removed chainset:$chgSet1");
                     handleExistingChainset=true;
                  } catch (Exception ec) {
                     logger.info ("Remove existing changeset failed:Exception ${ec.getMessage()} occurred");
                     ResultSetDetail resultSetDetail = new ResultSetDetail();
                     resultSetDetail.result= ec.getMessage();
                     resultMap.results.add(resultSetDetail);
                  }
               } else {
                  logger.info(it);
                  ResultSetDetail resultSetDetail = new ResultSetDetail();
                  resultSetDetail.result= "${it.type}-${it.relatedResource}";
                  resultMap.results.add(resultSetDetail);
               }
            }
            logger.warn(response);      
         } else { 
            logger.info("Got responseCode: $responseCode");
            String errorStr= con.getErrorStream().getText();
            ResultSetDetail resultSetDetail = new ResultSetDetail();
            resultSetDetail.result= "ResponseCode:$responseCode, Error=$errorStr";
            resultMap.results.add(resultSetDetail);
            logger.info("Got error message: $errorStr");
         }
      } catch (Exception ex1) {
         logger.warn(ex1.getMessage());
         ResultSetDetail resultSetDetail = new ResultSetDetail();
         resultSetDetail.result= ex1.getMessage();
         resultMap.results.add(resultSetDetail);
      }
   }
   if (responseObj == null) {
      return resultMap;
   }
   resultMapJson= responseObj;
   logger.info(JsonOutput.prettyPrint(JsonOutput.toJson(resultMapJson)).stripIndent());
   // Go through the report and handle each file
   resultMapJson.files.each{file->
   	String filePath=file.path;
   	String fileName = filePath.split("/")[-1];
   	logger.info("File path: $filePath, File name:$fileName"); 
	ResultSetDetail resultSetDetail1 = new ResultSetDetail();
	resultSetDetail1.result= "File path: $filePath, File name:$fileName";
	resultMap.results.add(resultSetDetail1);
   	if (filePath.startsWith("DatabaseTables/")) {
   		String table = fileName.split("\\.")[0];
   		logger.info("Job submit:$table");
		ResultSetDetail resultSetDetail = new ResultSetDetail();
		resultSetDetail.result= "Job submit:$table";
		resultMap.results.add(resultSetDetail);
		if (!(table.toLowerCase() in ["batchmaster","communication","scheduleoperationextention",
			"templateoperationextension",])){
			FileToDb.updateDbFromFile(table,"icm://$filePath","tab");
//	   		server.submitJob("WF002_QUEU_DbConfig", ["config-database-table":table,"config-icm-filepath":"icm:V:${file.importedVersion}//${file.path}","config-database":"Corresp","config-file-delimiter":"tab"]); 
   		}
   	} else if (filePath.startsWith("AdminResources/DesignerWorkflows/")) {
   		String icmPath = fileName.split("\\.")[0];
         ResultSetDetail resultSetDetail = new ResultSetDetail();
         resultSetDetail.result= "Generated DC:$icmPath";
         resultMap.results.add(resultSetDetail);
         publishDC("icm://$filePath",icmPath);
            // server.submitJob("WF002_QUEU_GenerateHTMLFromDC", ["config-icm-filepath":icmPath]); 
   	} else if (filePath.startsWith("Interactive/Sunsuper/Resources/Images/EMAIL_HOSTED_IMAGES")) {
		ResultSetDetail resultSetDetail = new ResultSetDetail();
		resultSetDetail.result= "Published email image:$fileName";
		resultMap.results.add(resultSetDetail);
   		publish(file,fileName);
   	} else {
   		def states= file.approvalStates;
   		boolean isProduction=false;
   		if (states != null) {
   			states.each{state->
   				if (state.name == "Production") isProduction = true;
   			}
   		}
   		if (forceApprovalStateUpdate && isProduction) {
            ResultSetDetail resultSetDetail = new ResultSetDetail();
            resultSetDetail.result= "Adjusted Validity on file:${file.path} for file version:${file.importedVersion}";
            resultMap.results.add(resultSetDetail);
            Icm.getFile("icm:V:${file.importedVersion}/"+file.path).setApprovalState("Production",icmUser,new Date(),null,"Published");
   		}
   	}
   }
   return resultMap;
}

/************************* Publish the DC wfd to html ****************************/
void publishDC(String templateWfdPath,String name) {
   logger.debug("In publishDC" );
   String outputFile = SystemVariables.'job-dir'.get()+"/"+name+".html";
   List<String> commands = new ArrayList<String>();
   commands.add("-f");
   commands.add(outputFile);
   commands.add("-e");
   commands.add("Dynamic Communications");
   IpsResponse response = Ips.runw(templateWfdPath, commands);
   logger.debug(response.ipsLog);
   if (response.status != "FINISHED" || response.errorsCount > 0) {
      currentJob.fail("Spooling failed for this IPS job: ${response.ipsJobId}");
   }
   Icm.upload("icm://AdminResources/html/"+name+".html", new FileInputStream(outputFile));
}

/************************* Publish the image File ****************************/
void publish (Map file,String name) {
	try {
	   CloudBlobClient blobClient = new CloudBlobClient(new URI(cdnBlobUri), new StorageCredentialsSharedAccessSignature(cdnSasString));
	   def container = blobClient.getContainerReference(cdnContainer);
	   String publishLabel = ((file.labels!=null && file.labels.size()>0)?file.labels[0]:null);
	   logger.info("File:$name, PublishLabel:$publishLabel");
	   if (publishLabel != null && isValidFormat(name.split("\\.")[-1])) {
	      String filename=name.split("\\.")[0]+"_"+publishLabel+"."+name.split("\\.")[-1];
	      CloudBlockBlob blob = container.getBlockBlobReference(filename);
	      if (blob.exists() && !forceUpdate) {
	          logger.info("$filename exists already");
	      } else {
	          InputStream inputStream = Icm.getFile("icm:V:${file.importedVersion}//${file.path}").download();
	          blob.upload(inputStream, inputStream.available());
	          logger.info("uploaded $filename");
	      }
	   }
	} catch (Exception e) {
	   logger.warn("Exception $e");
	} 
}

/************************ Get any user groups that the user is a member of ********************************************/
ArrayList<String> getUserGroups(String user) {
    ArrayList<String> groups= new ArrayList<String>();
    File jsonFile= new File("/data/userGroupInfo.json");
    try {
        Map input = new JsonSlurper().parse(jsonFile);
        def entry = input.usernames.find{it.username.toLowerCase()==user.toLowerCase()};
        entry.groups.each {
            groups.add(it.groupname);  
        }
    } catch (Exception e) {
        logger.warn("Exception: ${e.getMessage()}, trying again in 1s");
        Thread.sleep(1000);
        try {
            Map input1 = new JsonSlurper().parse(jsonFile);
            def entry1 = input1.usernames.find{it.username.toLowerCase()==user.toLowerCase()};
            entry1.groups.each {
                groups.add(it.groupname);  
            }
        } catch (Exception e1) {
            logger.warn("Exception: ${e1.getMessage()}");
        }
    }
    return groups;
}

/************************* Update IODB Table from File ****************************/
int updateDbFromFile(String tableId, String filePath, String delimiter)
{
	int line =0;
	int size=0;
	String primaryKey=null;
	String newDelim=delimiter;
	int columnToIgnore=9999;
	if ((newDelim==null) || (newDelim.toLowerCase() == "tab") || newDelim.length()<1) newDelim = '\t';
	
	// SQL String Creation
	StringBuffer sqlstr=new StringBuffer("MERGE dbo."+tableId+" WITH (SERIALIZABLE) AS T USING (VALUES (");
	StringBuffer sqlstr1=new StringBuffer(")) AS U (");
	StringBuffer sqlstr2=new StringBuffer(") ON U.");
	StringBuffer sqlstr3=new StringBuffer(" = T.");
	StringBuffer sqlstr4=new StringBuffer(" WHEN MATCHED THEN UPDATE SET ");
	StringBuffer sqlstr5=new StringBuffer(" WHEN NOT MATCHED THEN INSERT (");
	StringBuffer sqlstr6=new StringBuffer(")  VALUES (");
	StringBuffer sqlstr7=new StringBuffer(");");
	String finalSqlStr="";

	CustomDatabases.IODB.get().withCloseable{ sql ->

		new File(filePath).splitEachLine(newDelim) {fields ->
				if (line==0) {
					println(fields);
						size = fields.size();
						for (int j= 0; j< size;j++) {
								if (j==0) {
									    primaryKey = fields[j];
										sqlstr.append("?");
										sqlstr1.append(primaryKey);
										sqlstr2.append(primaryKey);
										sqlstr3.append(primaryKey);
										sqlstr5.append(primaryKey);
										sqlstr6.append("U."+primaryKey);
								} else {
									if (fields[j].equalsIgnoreCase("UpdatedDateTime")) {
										columnToIgnore=j;
									} else {
										if (j>1) {
												sqlstr4.append(",");
										}
										
										sqlstr.append(",?");
										sqlstr1.append("," +fields[j]);
										sqlstr4.append("T."+fields[j]+" = U."+fields[j]);
										sqlstr5.append(","+fields[j]);
										sqlstr6.append(",U."+fields[j]);
									}
								}
								
						}
						finalSqlStr =sqlstr.toString()+sqlstr1.toString()+sqlstr2.toString()+sqlstr3.toString()+sqlstr4.toString()+sqlstr5.toString()+sqlstr6.toString()+sqlstr7.toString();
						logger.info(finalSqlStr);
				} else {
						size = fields.size();
						String[] data;
						if (columnToIgnore <999) {
							data = new String[size-1];
						} else {
							data = new String[size];
						}
						int entries=0;
						for (int j= 0; j< size;j++) {
							if (fields[j] !=null) fields[j] = fields[j].replaceAll("\\\\n","\n").replaceAll("\\\\t","\t").replaceAll("\\\\r","\r");
							if (fields[j].trim().equalsIgnoreCase("null"))fields[j]=null; 
							if (j != columnToIgnore) {
								data[entries] = fields[j];
								entries++; 
							}
						}
//						if (columnToIgnore<999) fields.remove(columnToIgnore);
						sql.execute(finalSqlStr,data);
						// Added this line to cope with the case that Shirley refuses to put in the correct DB Trigger
						// Contains hardcoding the two main configuration tables
//						if (tableId=="TemplateMaster" || tableId=="Schedule") createDependant(tableId, primaryKey,fields[0] );
				}
				line++;
		}
	}
	return line-1;
}  



/******************* Only publish if extention is used for email images **************************/
boolean isValidFormat(String ext) {
   String extention = ext.toLowerCase();
   def validFormats=["png","pdf","jpg","jpeg","bmp","gif","tif"];
   return extention in validFormats;
}

/************************* Extract changeSetId from exception the image File ****************************/
String getChangeSetIdFromException (String input) {
   String result = null;
   // (relatedResource\=)(.*)\(([A-Z0-9]*)\)
   // Exception on import occured ICM change set import/export failed with the following error: 'errorCode=CHANGE_SET_EXISTS, relatedResource=Test1 (AB3FBF8D3A6BC74DA848D2B15B1D2C64)'.
   def typePattern = /relatedResource\=(.*)\(([A-Z0-9]*)\)/
   def match = input  =~ typePattern
   if (match.find()) {
      logger.info (" Group 1= ${match.group(1).trim()}, Group 2 = ${match.group(2)}");      
      result= match.group(2);
   }
   return result;
}

/************************* Extract chainsetId from resource ****************************/
String getChgId(String input) {
      // JK-Scaler8 (A83F4987BF6E6642AE79896BFFAAB710)
   String result = null;
   def typePattern = /.*\(([A-Z0-9]*)\)/
   def match = input  =~ typePattern
   if (match.find()) {
//      logger.info (" Group 1= ${match.group(1).trim()}, Group 2 = ${match.group(2)}");      
      result= match.group(1);
   }
   return result;
}

/************************* Mask changeSets returned ****************************/
boolean fitsMask(String name, String maskString){
   String typePattern = "^${maskString.replace('.', '[.]').replace('*', '.*').replace('?', '.')}\$";
   def match = name  =~ typePattern
   
   return match.find();
}
void zipFiles(String zipFilePath, ArrayList filesToAdd) {
	try {
		new File(zipFilePath).getParentFile().mkdirs();		
		ZipFile zipFile = new ZipFile(zipFilePath);
		ZipParameters parameters = new ZipParameters();
		parameters.setCompressionMethod(Zip4jConstants.COMP_DEFLATE);		
		parameters.setCompressionLevel(Zip4jConstants.DEFLATE_LEVEL_NORMAL); 		
		zipFile.addFiles(filesToAdd, parameters);
	} catch (ZipException e) {
		e.printStackTrace();
	}
}

void unzipFile(String zipFilePath, String destinationDir) {
	try {		
		ZipFile zipFile = new ZipFile(zipFilePath);
		zipFile.extractAll(destinationDir);
	} catch (ZipException e) {
		e.printStackTrace();
	}
}

String formatDateISo(Date date) {
    SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
    return simpleDateFormat.format(date);
}
/****************************** Classes used to return results   **********************************/
@Canonical
class ChangeSets {
   List<ChangeSetDetail> changeSets = new ArrayList<ChangeSetDetail>();
   String resultFailure = ""
}
@Canonical
class ChangeSetDetail {
   String name = ""
   String id =""
   Boolean open = false
   Boolean closed = false
   Boolean approved = false
   Boolean rejected = false
   String description = ""
   Boolean selected = false
}
@Canonical
class ResultSet {
   List<ResultSetDetail> results = new ArrayList<ResultSetDetail>()
}
@Canonical
class ResultSetDetail {
   String result=""
}   
@Canonical
class ExportChangeSets {
   List<ExportChangeSetDetail> exports = new ArrayList<ExportChangeSetDetail>();
   List<ChangeSetDetail> changeSets ;
   Zip zip = new Zip()
}
@Canonical
class Zip {
   String fileName
   String data
}
@Canonical
class ExportChangeSetDetail {
   String changeSetName = ""
   String fileName = ""
   String message = ""
   String exportData =""
   Integer numberOfFiles=0
}
@Canonical
class Environments {
   List<EnvironmentDetails> environments = new ArrayList<EnvironmentDetails>();
   String user = ""
   String currentEnvironment = ""
}
@Canonical
class EnvironmentDetails {
   String name =""
   String host = "inspire-<env->icm.sunqld.com.au"
   Integer port = 30353
}
@Canonical
class ExportEnvironmentWrap {
   ExportEnvironment exportEnvironmentResult = new ExportEnvironment()
}
@Canonical
class ExportEnvironment {
   String message=""
   String fileName=""
   String exportData =""
}
@Canonical
class ImportEnvironmentWrap {
   String importEnvironmentResult = ""
}

/****************************** Classes used to for input   **********************************/
@Canonical
class RemoteEnv {
   RemoteEnvDetail remote = new RemoteEnvDetail();
}
@Canonical
class RemoteEnvDetail {
   Boolean enabled = false
   String host = "inspire-<env>-icm.sunqld.com.au"
   Integer port = 30353
   String user
   String password
}



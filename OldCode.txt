import groovy.transform.Canonical;
import groovy.json.JsonSlurper;
import groovy.json.JsonOutput;
import com.microsoft.azure.storage.*;
import com.microsoft.azure.storage.blob.*;
import net.gmc.vcs.ChangeSetStatus;
import java.util.regex.*;
import java.util.Base64;
import SunUtils;
import java.security.MessageDigest;
import javax.crypto.spec.SecretKeySpec;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.Cipher;
import java.nio.charset.StandardCharsets;
import java.security.DigestException;
import java.text.SimpleDateFormat;
import java.util.Properties;
import jakarta.mail.*;
import jakarta.mail.internet.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.xssf.usermodel.*;
import org.apache.poi.ss.util.*;
import org.apache.poi.ss.usermodel.*;
import javax.net.ssl.HttpsURLConnection

/*****************************************************************************************************
GET requests have URLS:
Doesn't contains "download" :- returns DC
Otherwise returns export json for change request

POST request have URLS that end with:
"_getchangesets" - returns a change set list
"_getenvironments" returns the Inspire environment details
"_import" - imports a change set file
"_importenvironmentvariables"  - Imports a environmenta variable export file
"_export" - Exports a set of changeSets to files
"_exportenvironment" - exports the environmental variables to a json file (passwords are encrypted)
"_delete" - deletes a set of ChangeSets
"_setchangesets" - Updates a set of change sets.
****************************************************************************************************/

/*** Global variables ***/
boolean forceUpdate = false;
boolean forceApprovalStateUpdate = false;
				  
String cdnBlobUri = server.getAttribute("cdn-blob-uri");
String cdnContainer =  server.getAttribute("cdn-container");
String cdnSasString = server.getAttribute("cdn-sas-token");
String env = server."Environment";
String urlStart = server."eml-resources-storage-prefix" + "/";
String defaultImagePath = server."cdn-icm-path";
String secret = "ChangeSets101";
//IcmUtils icmUtils;
/****** Passed variables */

/*** Test variables */

/***  Get user making change  */
String headers = job."CorrelationId";
String user = "Inspire";

if (headers != null && headers.length() > 10) {
   headers.find(~/authorized-username\=([A-Za-z][A-Za-z0-9]*)/) { match, auth_user ->
      if (auth_user != null) user = auth_user;
   }
}

icmUtils = new IcmUtils();
String userEmail = icmUtils.getUserEmail(user);
if (icmUtils != null) {
      icmUtils.close();
   }
   

job."CorrelationId" = userEmail;
String requestUri = job."http_request_uri";



/*** Get Request */


String http_method = job.getAttribute("http_method").toUpperCase();
if (http_method == "GET" && !(requestUri.contains("download"))) {
   /******************* download DC method **************************/
   def doc = job.getDocuments()[0];
   job.setAttribute("http_response_header", "text/html");
   doc.setAttribute("document-is-http-response", true);
} else if (http_method == "GET" && requestUri.contains("download")) {
   /******************* download file method **************************/
   String documentPath = requestUri.tokenize("=")[-1];
   documentPath = URLDecoder.decode(documentPath);
   println("Received request for document $documentPath");
   String fileDetail = documentPath.split("=")[-1];
   String docName = fileDetail.split("/")[-2] + ".json";
   String changeSetId = fileDetail.split("/")[-1];
   String contentDisposition = "attachment; filename=$docName";
   IcmUtilsAdv icmUtilsAdv = new IcmUtilsAdv();
   String resultJson = icmUtilsAdv.exportChangeSetJson(changeSetId);
   icmUtilsAdv.close();
   def prettyJson = new JsonSlurper().parseText(resultJson);
   def doc2 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(prettyJson)).stripIndent(), docName);
   job.setAttribute("output_path", contentDisposition);
   doc2.setAttribute("document-is-http-response", true);
   doc2.setAttribute("document-format", "json");
   doc2.setAttribute("document-file-name", docName + ".json");
}

if (http_method != "POST") return;
job.setAttribute("http_response_header", "application/json");

def doc = job.getDocuments()[0];
JsonSlurper JSONSlurper = new JsonSlurper();
String responseFile = "response";

if (requestUri.endsWith("_getchangesets")) {
   /******************* Get changesets **************************/
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
   RemoteEnvDetail rem = input.remote;
   IcmUtilsAdv icmUtilsAdv;

   ChangeSets res2 = new ChangeSets();
   try {
      if (rem != null && rem.enabled && user != "Inspire") {
         if (!(rem.user != null && rem.user.trim().length() > 0)) rem.user = user;
         icmUtilsAdv = new IcmUtilsAdv(rem.host, rem.port, rem.user, decryptPass(rem.password));
      } else {
         icmUtilsAdv = new IcmUtilsAdv();
      }
      ChangeSetStatus changeSetStatusInput = new ChangeSetStatus();
      if (input.isOpenSelect) changeSetStatusInput.opened();
      if (input.isClosedSelect) changeSetStatusInput.closed();
      if (input.isApprovedSelect) changeSetStatusInput.approved();
      if (input.isRejectedSelect) changeSetStatusInput.rejected();

      String changeSetMask = input.changeSetMask;
      def res1 = icmUtilsAdv.listChangeSets(changeSetStatusInput, input.excludeDestination);
      println("Res1:$res1");
      res1.each { it ->
         if (fitsMask(it.getDisplayName(), changeSetMask)) {
            ChangeSetDetail chg = new ChangeSetDetail();
            chg.name = it.getDisplayName();
            chg.id = it.getId();
            chg.description = it.getDescription();
            chg.open = it.getStatus().isOpened();
            chg.closed = it.getStatus().isClosed();
            chg.approved = it.getStatus().isApproved();
            chg.rejected = it.getStatus().isRejected();
            res2.changeSets.add(chg);
         }
      }
   } catch (Exception e7) {
      println("Exception ${e7.getMessage()}");
      res2.resultFailure = "Exception ${e7.getMessage()}";
   }
   if (icmUtilsAdv != null) icmUtilsAdv.close();

   def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(res2)).stripIndent(), responseFile + ".json");
   doc1.setAttribute("document-is-http-response", true);
   doc1.setAttribute("document-format", "json");
   doc1.setAttribute("document-file-name", responseFile + ".json");
} 
else if (requestUri.endsWith("_getenvironments")) {
   /******************* Get environments **************************/
   IcmUtilsAdv icmUtilsAdv = new IcmUtilsAdv();
   def envList = icmUtilsAdv.getEnvironments();
   Environments environments = new Environments();
   environments.currentEnvironment = icmUtilsAdv.getCurrentEnvironment();
   environments.user = user;
   EnvironmentDetails envDetailsBlank = new EnvironmentDetails();
   envDetailsBlank.host = "";
   environments.environments.add(envDetailsBlank);
   envList.each {
      EnvironmentDetails envDetails = new EnvironmentDetails();
      envDetails.name = it;
      if (it.toLowerCase() != "prod") {
         envDetails.host = envDetails.host.replace("<env->", it + "-");
      } else {
         envDetails.host = envDetails.host.replace("<env->", "");
      }
      environments.environments.add(envDetails);
   }
   icmUtilsAdv.close();
   def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(environments)).stripIndent(), responseFile + ".json");
   doc1.setAttribute("document-is-http-response", true);
   doc1.setAttribute("document-format", "json");
   doc1.setAttribute("document-file-name", responseFile + ".json");
}
/********Import Method*******************/
else if (requestUri.endsWith("_import")) {
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
    forceApprovalStateUpdate = input.forceApprovalStateUpdate;
   boolean overWrite = input.overWrite;
   String binaryData = input.fileBinaryData;
   String fileName = input.fileName;
   IcmUtilsAdv icmUtilsAdv = new IcmUtilsAdv();
   icmUtils = new IcmUtils();
   
  
 


   if (user != "Inspire") {
      try {
         impersonateSuccess = icmUtilsAdv.impersonate(user);
         icmUtils.impersonate(user);
      } catch (Exception i1) {
         println("Cannot impersonate: ${i1.getMessage()}");
      }
   }
   def results = new ResultSet();
   boolean authorised = true;
   if (user != "Inspire") {
      def groups = icmUtils.getUserGroups(user);
       println(groups);
      if (!("ROL-G-Inspire-Manage Releases" in groups) && server."Environment".toLowerCase() == "prod") {
         authorised = false;
        results.results.add([result: "You are not authorized to deploy in Production"]);
      }
   }


   if (authorised) {
      byte[] hexData = binaryData.substring(binaryData.indexOf("base64,") + 7).decodeBase64();

      if (fileName.endsWith("zip")) {
         def pathValues = "";
         def selectedImpact = "";
         def packagedby = "";
         def questionsAndResponses = "";
         def jsonSlurper = new JsonSlurper();
         def changeSetJsonFiles = new ArrayList<File>();
         def allPathValues = new HashSet<String>();
         def taskURL = null;
         def pathVersionMap = [:];
         def processedPaths = new HashSet<String>();
         def processedResults = new HashSet<String>();
         def uniqueResults = [];

         File spool = job.getSpoolDir();
         String zipFileDest = spool.path + '/ChangeSets';
         new File(zipFileDest).mkdir();
         String zipFilePath = spool.path + '/zipfile.zip';
         File zipFile = new File(zipFilePath);
         zipFile.setBytes(hexData);
         SunUtils.unzipFile(zipFilePath, zipFileDest);
         def changeSetFiles = new ArrayList<File>();
         new File(zipFileDest).eachFileMatch(~/.+\.chs$/) { file ->
            changeSetFiles.add(file);
         }
         def sortedFiles = changeSetFiles.sort { a, b -> a.getName() <=> b.getName() };
         sortedFiles.each { file ->
            result = importChangeSet(file.getBytes(), overWrite, forceApprovalStateUpdate, icmUtilsAdv, icmUtils);
            result.results.each { res ->
               if (processedResults.add(res.result)) {
                  uniqueResults.add(res);
               }
            }
            results.results.addAll(uniqueResults);
            if (!result.toString().contains('errorCode')) {
               new File(zipFileDest).eachFileMatch(~/.+\.json$/) { jsonfile ->
                  changeSetJsonFiles.add(jsonfile);
               }
               def sortedJsonFiles = changeSetJsonFiles.sort { a, b -> a.getName() <=> b.getName() };
               sortedJsonFiles.each { jsonFile ->
                  def jsonContent = jsonSlurper.parse(jsonFile);
                  if (jsonFile.getName() == 'UserResponses.json') {
                      packagedby = jsonContent.Packagedby ?: "";
                     selectedImpact = jsonContent.SelectedImpact ?: "";
                     questionsAndResponses = jsonContent.Questions.collect { question ->
                        "${question.SelectedQuestion}: <b>${question.SelectedResponse}</b>";
                     }.join("<br>");
                  } else {
                     jsonContent.changesetfiles.each { changeSetFile ->
                        def path = changeSetFile.path;
                        def version = changeSetFile.evaluatedversion;
                        if (!processedPaths.contains(path)) {
                           processedPaths.add(path);
                           if (!pathVersionMap.containsKey(path) || pathVersionMap[path] < version) {
                              pathVersionMap[path] = version;
                              allPathValues.add(path);
                           }
                        }
                     }
                     allPathValues.addAll(pathVersionMap.keySet());
                  }
                  if (jsonFile.getName() != 'UserResponses.json') {
                     jsonContent.metadata.each { metaname ->
                        if (metaname.name == "Description" && taskURL == null) {
                           def value = metaname.datavalues?.value;
                           taskURL = value instanceof Collection ?
                                   value.collect { it?.toString() ?: '' }.join('') :
                                   value?.toString() ?: '';

                           taskURL = taskURL.replaceAll(/[\[\]]/, '');
                        }
                     }
                  }
               }
            }
            pathValues = allPathValues.unique().join("<br>");
            println(pathValues);
         }
         def combinedString = """
            <html>
            <head>
                <style>
                    
                </style>
            </head>
            <body>
                <p><b>Environment:</b> ${env}</p>
                <p><b>Packaged by:</b> ${packagedby}</p>
                <p><b>Deployed by:</b> ${userEmail}</p>
                <p><b>Task URL:</b> <a href="${taskURL}">${taskURL}</a></p></p>
                <p><b>Impact:</b> ${selectedImpact}</p>

                <p><b><h3>Resources:</h3></b></p>
                <p>${pathValues}</p>

                <p><b><h3>Responses:</h3></b></p>
                <p>${questionsAndResponses}</p>
            </body>
            </html>
            """;

         def matcher = (taskURL =~ /browse\/([A-Z0-9-]+)/);
         def issueKey = matcher ? matcher[0][1] : null;
         def emailSubject = "Inspire " + env + " Deployment completed by " + userEmail;
         if (!result.toString().contains('errorCode')) {
            if (issueKey != null) {
               def jiraText = convertHtmlToJiraText(combinedString);
                if (saveToJira(issueKey, jiraText))
               println("Save to Jira successful");
               else
               println("Save to Jira failed");
            }
           
          def toAddress = userEmail;
           
           if(server."Environment".toLowerCase() == "prod")
           {
           toAddress = "dl-org-com-cmac-marketingandcommsdelivery@art.com.au";
           }
           
           sendEmail(toAddress,emailSubject, combinedString);
            // Add Excel saving functionality
            def success = saveToMonthlyExcel(
                    taskURL,
                    packagedby,
                    userEmail,
                    pathValues?.replaceAll('<br>', '\n'),
                    questionsAndResponses?.replaceAll('<br>', '\n')
            );
            if (success) {
               println("Successfully saved deployment information to Excel");
            } else {
               println("Failed to save deployment information to Excel");
            }
         }
      } else {
         results = importChangeSet(hexData, overWrite, forceApprovalStateUpdate, icmUtilsAdv, icmUtils);
         println(results);
      }
   }
  
   icmUtilsAdv.close();
   if (icmUtils != null) {
      icmUtils.close();
   }
   def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(results)).stripIndent(), responseFile + ".json");
   println(doc1);
   doc1.setAttribute("document-is-http-response", true);
   doc1.setAttribute("document-format", "json");
   doc1.setAttribute("document-file-name", responseFile + ".json");
} else if (requestUri.endsWith("_importview")) {
/******************* Import change set view method **************************/
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
   String binaryData = input.fileBinaryData;
   String fileName = input.fileName;
   def results = new ResultSet();
   byte[] hexData = binaryData.substring(binaryData.indexOf("base64,") + 7).decodeBase64();
   def uniqueResults = [:];

   // Define version comparison method
   def compareVersionNumbers = { ver1, ver2 ->
      def v1 = ver1.toString();
      def v2 = ver2.toString();

      try {
         return v1.toInteger() <=> v2.toInteger();
      } catch (Exception e) {
         return v1 <=> v2;
      }
   };

   if (fileName.endsWith("zip")) {
      File spool = job.getSpoolDir();
      String zipFileDest = spool.path + '/ChangeSets';
      new File(zipFileDest).mkdir();
      String zipFilePath = spool.path + '/zipfile.zip';
      File zipFile = new File(zipFilePath);
      zipFile.setBytes(hexData);
      SunUtils.unzipFile(zipFilePath, zipFileDest);
      def fileJsonSlurper = new JsonSlurper();
      def changeSetFiles = new ArrayList<File>();
      new File(zipFileDest).eachFileMatch(~/.+\.json$/) { file ->
         changeSetFiles.add(file);
      }

      String resourceClssification = "icm://CONFIG_RESOURCES/ICM Resource Classification.json";
      IcmUtils utils = new IcmUtils();
      def readInput = utils.readIcmFile(resourceClssification);
      def jsonString = readInput.getText('UTF-8').replaceAll('\uFEFF', '');
      def jsonSlurper = new JsonSlurper();
      def jsonDataParsed = jsonSlurper.parseText(jsonString);
      utils.close();
      def resourceMap = jsonDataParsed.collectEntries { [(it.Location): it] };

      def sortedFiles = changeSetFiles.sort { a, b -> a.getName() <=> b.getName() };

      // Process each JSON file
      sortedFiles.each { file ->
         try {
            def jsonContent = fileJsonSlurper.parse(file);
            jsonContent.changesetfiles.each { res ->
               def path = res.path;
               def version = res.evaluatedversion;

               // Changed to use compareVersionNumbers closure
               if (!uniqueResults.containsKey(path) ||
                       compareVersionNumbers(version, uniqueResults[path].version) > 0) {

                  ResultSetDetail resultSetDetail = new ResultSetDetail();
                  resultSetDetail.result = path;
                  resultSetDetail.version = version;

                  resourceMap.each { location, resource ->
                     if (resultSetDetail.result.contains(location)) {
                        resultSetDetail.order = resource.Order;
                        resultSetDetail.componentType = resource.ComponentType;
                        resultSetDetail.displayColour = resource.Colour;
                        return false;
                     }
                  };
                  if (jsonContent.metadata) {
                     jsonContent.metadata.find { metaname ->
                        if (metaname.name == "Description") {
                           resultSetDetail.description = metaname.datavalues.value;
                           println(resultSetDetail.description);
                           return true;
                        }
                        return false;
                     };
                  }
                  uniqueResults[path] = resultSetDetail;
               }
            };
         } catch (Exception e) {
            println("Error processing JSON file ${file.getName()}: ${e.message}");
            ResultSetDetail errorDetail = new ResultSetDetail();
            errorDetail.result = "Error processing file ${file.getName()}: ${e.message}";
            results.results.add(errorDetail);
         }
      };

      // Add all unique results after processing all files
      
      results.results.addAll(uniqueResults.values());

   } else if (fileName.endsWith("chs")) {
    ResultSetDetail resultSetDetail = new ResultSetDetail();
    resultSetDetail.result = "Not a zip file";
    results.results.add(resultSetDetail);
    println("Not a zip file");
} else {
    ResultSetDetail resultSetDetail = new ResultSetDetail();
    resultSetDetail.result = "Not a zip file";
    results.results.add(resultSetDetail);
    println("Not a zip file");
}

def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(results)).stripIndent(), responseFile + ".json");
doc1.setAttribute("document-is-http-response", true);
doc1.setAttribute("document-format", "json");
doc1.setAttribute("document-file-name", responseFile + ".json");

}

else if (requestUri.endsWith("_importenvironmentvariables")) {
   /******************* import changeset file **************************/
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
   String binaryData = input.environmentBinaryData;
   String fileName = input.environmentFileName;
   byte[] hexData = binaryData.substring(binaryData.indexOf("base64,") + 7).decodeBase64();
   InputStream inputStream = new ByteArrayInputStream(hexData);
   String result = null;
   ImportEnvironmentWrap impWrap = new ImportEnvironmentWrap();
   try {
      IcmUtilsAdv icmUtilsAdv = new IcmUtilsAdv();
      icmUtilsAdv.importConfigurationEnvironmentVariables(inputStream);
      impWrap.importEnvironmentResult = "Success";
   } catch (Exception e) {
      println("Import config variables had exception ${e.getMessage()}");
      impWrap.importEnvironmentResult = "Import config variables had exception ${e.getMessage()}";
   }
   def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(impWrap)).stripIndent(), responseFile + ".json");
   doc1.setAttribute("document-is-http-response", true);
   doc1.setAttribute("document-format", "json");
   doc1.setAttribute("document-file-name", responseFile + ".json");
} else if (requestUri.endsWith("_export")) {
   /******************* export change sets to file method **************************/
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
   RemoteEnvDetail rem = input.remote;
   def changeSetInfo = input.changeSets;
   
   String destination = ""
   
   if(server."Environment"=="Intg"){
   destination = 'forAcpt';}
   else if (server."Environment"=="Acpt"){
   destination = 'forProd';
   }	
   
   				   
   
   IcmUtilsAdv icmUtilsAdv;
   try {
      if (rem != null && rem.enabled && user != "Inspire") {
         if (!(rem.user != null && rem.user.trim().length() > 0)) rem.user = user;
         icmUtilsAdv = new IcmUtilsAdv(rem.host, rem.port, rem.user, decryptPass(rem.password));
      } else {
         icmUtilsAdv = new IcmUtilsAdv();
      }
      String saveFilepath;
      ExportChangeSets exportChangeSets = new ExportChangeSets();
      exportChangeSets.changeSets = input.changeSets;
      File spool = job.getSpoolDir();
      String zipFileDest = spool.path + '/ChangeSets';
      new File(zipFileDest).mkdir();
      if (input.saveTarget == 1) {
         saveFilepath = (input.zip.exportLocation != null && input.zip.exportLocation.trim().length() > 0) ? input.zip.exportLocation : "";

         new File(saveFilepath).mkdir();
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         if (destination != null && destination.trim().length() > 0) {
            println(destination);
            saveFilepath += "/$destination";
            new File(saveFilepath).mkdir();
            println(saveFilepath);
            java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         }
      }
      changeSetInfo.each {
         if (it.selected && (it.closed || it.approved)) {
            String changeSetId = it.id;
            StringBuilder reportByRef = new StringBuilder();
            ExportChangeSetDetail csd = new ExportChangeSetDetail();
            csd.changeSetName = it.name;
            try {
               InputStream inputStream = exportChangeSet(changeSetId, destination, reportByRef, icmUtilsAdv);
               Map report = new JsonSlurper().parseText(reportByRef.toString());
               int numFiles = (report != null && report.files != null) ? report.files.size() : 0;
               byte[] hexData = inputStream.readAllBytes();
               csd.fileName = "${it.name}.chs";
               csd.numberOfFiles = numFiles;
               if (input.saveTarget == 1) {
                  if (destination != null && destination.trim().length() > 0) {
                     csd.fileName = "${it.name}_${destination}.chs";
                  }
                  csd.exportData = "data:application/octet;base64," + Base64.getEncoder().encodeToString(hexData);
               } else if (input.saveTarget == 1) {
                  String fullSavePath = "$saveFilepath/${it.name}.chs";
                  File saveFile = new File(fullSavePath);
                  saveFile.setBytes(hexData);
                  java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(fullSavePath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
                  csd.changeSetName = fullSavePath;
               } else if (input.saveTarget == 2) {
                  String fullSavePath = "$zipFileDest/${it.name}.chs";
                  File saveFile = new File(fullSavePath);
                  saveFile.setBytes(hexData);
                  csd.changeSetName = fullSavePath;
                  String saveJson = exportChangeSetJson(changeSetId, destination, icmUtilsAdv);
                  fullSavePath = "$zipFileDest/${it.name}.json";
                  saveFile = new File(fullSavePath);
                  saveFile.setText(saveJson);

                  fullSavePath = "$zipFileDest/UserResponses.json";
                  processAndSaveJson(input, fullSavePath);
               }
            } catch (Exception e) {
               println("Export changeset ${it.name} has exception ${e.getMessage()}");
               csd.message = e.getMessage();
            }
            exportChangeSets.exports.add(csd);
            it.selected = false;
         } else if (it.selected) {
            ExportChangeSetDetail csd = new ExportChangeSetDetail();
            csd.changeSetName = it.name;
            csd.message = "ChangeSet is in incorrect state";
            exportChangeSets.exports.add(csd);
            it.selected = false;
         }
      }
      if (input.saveTarget == 2) {
         ArrayList filesToAdd = new ArrayList();
         int countExports = 0;
         new File(zipFileDest).eachFile() { file ->
            filesToAdd.add(file);
            countExports++;
         }
         if (countExports > 0) {
            String zipFilePath = spool.path + '/' + input.zip.fileName;
            SunUtils.zipFiles(zipFilePath, filesToAdd);
            File zip = new File(zipFilePath);
            exportChangeSets.zip.fileName = destination + '_' + input.zip.fileName;
            exportChangeSets.zip.data = "data:application/zip;base64," + Base64.getEncoder().encodeToString(zip.getBytes());
         }
      }
      def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(exportChangeSets)).stripIndent(), responseFile + ".json");
      doc1.setAttribute("document-is-http-response", true);
      doc1.setAttribute("document-format", "json");
      doc1.setAttribute("document-file-name", responseFile + ".json");
   } catch (Exception eFinal) {
      println("Unexpected failure:{eFinal.getMessage()}");
   } finally {
      try {
         if (icmUtilsAdv != null) icmUtilsAdv.close();
      } catch (Exception eFinally) {
      }
   }
} else if (requestUri.endsWith("_exportenvironment")) {
   /******************* export environment variable file method **************************/
   Map input = JSONSlurper.parse(new File(doc.getDocumentPath()));
   RemoteEnvDetail rem = input.remote;
   String saveFilepath;
   String destination = (input.destination != null && input.destination.trim().length() > 0) ? input.destination : "";
   ExportEnvironmentWrap envWrap = new ExportEnvironmentWrap();
   try {
      IcmUtilsAdv icmUtilsAdv;
      if (rem != null && rem.enabled && user != "Inspire") {
         if (!(rem.user != null && rem.user.trim().length() > 0)) rem.user = user;
         icmUtilsAdv = new IcmUtilsAdv(rem.host, rem.port, rem.user, decryptPass(rem.password));
      } else {
         icmUtilsAdv = new IcmUtilsAdv();
      }
      InputStream inputStream = icmUtilsAdv.exportConfigurationEnvironmentVariables();
      byte[] hexData = inputStream.readAllBytes();
      String isoDate = SunUtils.formatDateISo(new Date());
      envWrap.exportEnvironmentResult.fileName = "environment_${isoDate}.env";
      if (input.saveTargetEnvironment == 1) {
         if (destination != null && destination.trim().length() > 0) {
            envWrap.exportEnvironmentResult.fileName = "environment_${destination}_${isoDate}.env";
         }
         envWrap.exportEnvironmentResult.exportData = "data:application/octet;base64," + Base64.getEncoder().encodeToString(hexData);
         envWrap.exportEnvironmentResult.message = "Success";
      } else if (input.saveTargetEnvironment == 2) {
         saveFilepath = (input.directoryName != null && input.directoryName.trim().length() > 0 && input.directoryName.startsWith("/")) ? input.directoryName : "/data/deploy";
         new File(saveFilepath).mkdir();
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         if (destination != null && destination.trim().length() > 0) {
            saveFilepath += "/$destination";
            new File(saveFilepath).mkdir();
            java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(saveFilepath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         }
         String fullSavePath = "$saveFilepath/environment_${isoDate}.env";
         File saveFile = new File(fullSavePath);
         saveFile.setBytes(hexData);
         envWrap.exportEnvironmentResult.fileName = fullSavePath;
         java.nio.file.Files.setPosixFilePermissions(java.nio.file.Paths.get(fullSavePath), java.nio.file.attribute.PosixFilePermissions.fromString("rwxrwxrwx"));
         envWrap.exportEnvironmentResult.message = "Success";
      }
      icmUtilsAdv.close();
   } catch (Exception e) {
      println("Export environment variables has exception ${e.getMessage()}");
      envWrap.exportEnvironmentResult.message = e.getMessage();
   }
   def doc1 = job.addDocument(JsonOutput.prettyPrint(JsonOutput.toJson(envWrap)).stripIndent(), responseFile + ".json");
   doc1.setAttribute("document-is-http-response", true);
   doc1.setAttribute("document-format", "json");
   doc1.setAttribute("document-file-name", responseFile + ".json");
}

/******************* Map ChangeSets **************************/
Map listChangeSets() {
   IcmUtilsAdv icmUtilsAdv = new IcmUtilsAdv();
   icmUtilsAdv.setChangeSetStatusMask(2);
   def mapChg = icmUtilsAdv.mapChangeSets("xxxx");
   icmUtilsAdv.close();
}

/****************** Save to Jira *****************************/
Boolean saveToJira(String issue, String body) {
    if (issue == null || body == null) {
        println("Issue or body is null")
        return false
    }

    JsonSlurper JSONSlurper = new JsonSlurper()
    Boolean result = false
    Map response = null
    String endpoint = "https://jira.gso.internal/rest/api/2/issue/$issue/comment"
    String password = '''d0a~\$W"'2ro8'''
    String username = 'S000363'

    String authString = "$username:$password".getBytes().encodeBase64().toString()
      
    try {
        def ctx = Ssl.getSSLContext(server."server-truststore")
        if (ctx == null) {
            println("SSL context is null")
            return false
        }
        def con = new URL(endpoint).openConnection()
        
        if (con instanceof HttpsURLConnection && ctx != null) {
            ((HttpsURLConnection) con).setSSLSocketFactory(ctx.getSocketFactory())
        }
        con.setConnectTimeout(120000)
        con.setReadTimeout(120000)
        con.setRequestMethod("POST")
        con.setRequestProperty("Content-type", "application/json")
        con.setRequestProperty("Authorization", "Basic ${authString}")
        con.setDoOutput(true)

        def bwr = new BufferedWriter(new OutputStreamWriter(con.getOutputStream()))
        String escapedBody = JsonOutput.toJson(body)
        String out = """{"body": ${escapedBody}}"""
        println("call json=$out")
        bwr.write(out)
        bwr.flush()
        bwr.close()
        int responseCode = con.getResponseCode()
              
        if (responseCode == 201) { 
            try {
                response = JSONSlurper.parse(con.getInputStream())
                if (response != null) {
                    result = true
                } else {
                    println("Response is null")
                }
            } catch (Exception e) {
                println("Exception parsing response: $e")
                e.printStackTrace()
            }
        } else {
            def responseStream = new BufferedReader(new InputStreamReader(con.getErrorStream()))
            println("Failed Jira comment for reason: " + responseStream.getText())
        }
    } catch (Exception e) {
        println("Exception: $e")
        e.printStackTrace()
    }
    return result
}
/******************* Send Email **************************/
void sendEmail(String toAddress,String subject, String emailBody) {
   Properties properties = System.getProperties();
   properties.setProperty("mail.smtp.host", server."smtp-server");
   Session session = Session.getDefaultInstance(properties);
   try {
      MimeMessage message = new MimeMessage(session);
      message.setFrom(new InternetAddress("InspireAdministrator@sunsuper.com.au"));
      message.addRecipient(Message.RecipientType.TO, new InternetAddress(toAddress));
      message.setSubject(subject);
      message.setContent(emailBody, "text/html");
      Transport.send(message);
   } catch (MessagingException mex) {
      println(mex);
   }
}

/******************* Save to Excel **************************/
def saveToMonthlyExcel(String taskURL,String packagedBy,String user, String resources, String questionsAndResponses) {
   try {
      // Define base directory for Excel storage
      String baseDir = "/data/deploy";
      File dir = new File(baseDir)

      if (!dir.exists()) {
          dir.mkdirs()
          }
      // Get current date for folder/file naming
      def currentDate = new Date();
      def monthYear = currentDate.format('MMM-yyyy');

      // Define Excel file path
      File excelFile = new File(baseDir, "deployments-${monthYear}.xlsx");

      // Initialize workbook and sheet
      XSSFWorkbook workbook;
      XSSFSheet sheet;
      int lastRowNum = 0;

      // Check if file exists
      if (excelFile.exists()) {
         // If file exists, load it
         FileInputStream fis = new FileInputStream(excelFile);
         workbook = new XSSFWorkbook(fis);
         sheet = workbook.getSheetAt(0);
         lastRowNum = sheet.getLastRowNum() + 1;
         fis.close();
      } else {
         // Create new workbook and sheet
         workbook = new XSSFWorkbook();
         sheet = workbook.createSheet("Deployments");

         // Create header row with styles
         CellStyle headerStyle = workbook.createCellStyle();
         Font headerFont = workbook.createFont();
         headerFont.setBold(true);
         headerStyle.setFont(headerFont);
         headerStyle.setFillForegroundColor(IndexedColors.GREY_25_PERCENT.getIndex());
         headerStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);

         Row headerRow = sheet.createRow(0);
         String[] headers = ["Timestamp (UTC)", "TaskURL", "Resources", "QuestionsAndResponses","PackagedBy", "DeployedBy"];

         headers.eachWithIndex { header, idx ->
            Cell cell = headerRow.createCell(idx);
            cell.setCellValue(header);
            cell.setCellStyle(headerStyle);
         };

         lastRowNum = 1;
      }

      // Create cell style for wrapped text
      CellStyle wrapStyle = workbook.createCellStyle();
      wrapStyle.setWrapText(true);

      // Create new row for data
      Row row = sheet.createRow(lastRowNum);
      // Set appropriate row height for wrapped content
      row.setHeight((short) -1); // Auto height

      // Clean and prepare data
      def timestamp = currentDate.format('yyyy-MM-dd HH:mm:ss');
      def cleanTaskURL = taskURL ?: "";
      def cleanPackagedBy = packagedBy ?: "";

      // Add double line breaks between entries
      def cleanResources = resources?.replaceAll('<br>', '\n\n')?.trim() ?: "";
      def cleanResponses = questionsAndResponses?.replaceAll('<br>', '\n\n')?.replaceAll('<b>', '')?.replaceAll('</b>', '')?.trim() ?: "";

      // Create cells with wrap style
      def cells = [
              [0, timestamp],
              [1, cleanTaskURL],
              [2, cleanResources],
              [3, cleanResponses],
              [4, cleanPackagedBy],
              [5, user ?: ""]
      ];

      cells.each { idx, value ->
         Cell cell = row.createCell(idx);
         cell.setCellValue(value);
         cell.setCellStyle(wrapStyle);
      };

      // Auto-size columns
      (0..5).each { sheet.autoSizeColumn(it) };

      // Set minimum column widths
      sheet.setColumnWidth(1, 20000); // Resources column
      sheet.setColumnWidth(2, 35000); // Resources column
      sheet.setColumnWidth(3, 25000); // QuestionsAndResponses column

      // Save workbook
      FileOutputStream fileOut = new FileOutputStream(excelFile);
      workbook.write(fileOut);
      fileOut.close();
      workbook.close();

      println("Successfully added entry to Excel file: ${excelFile.absolutePath}");
      return true;

   } catch (Exception e) {
      println("Error saving to Excel: ${e.getMessage()}");
      e.printStackTrace();
      return false;
   }
}

/******************* Export ChangeSets **************************/
InputStream exportChangeSet(String changeSetId, String destination, StringBuilder reportByRef, IcmUtilsAdv icmUtilsAdv) {
   InputStream iStream = icmUtilsAdv.exportChangeSet(changeSetId, destination);
   reportByRef.append(icmUtilsAdv.getExportReport());
   return iStream;
}

/******************* Export ChangeSets **************************/
String exportChangeSetJson(String changeSetId, String destination, IcmUtilsAdv icmUtilsAdv) {
   String result = "";
   String resultJson = icmUtilsAdv.exportChangeSetJson(changeSetId);
   def prettyJson = new JsonSlurper().parseText(resultJson);
   result = JsonOutput.prettyPrint(JsonOutput.toJson(prettyJson)).stripIndent();
   return result;
}

/******************* Import ChangeSets **************************/
ResultSet importChangeSet(byte[] hexData, boolean overWrite, boolean forceApprovalStateUpdate, IcmUtilsAdv icmUtilsAdv, IcmUtils icmUtils) {
   InputStream inputStream = new ByteArrayInputStream(hexData);
   JsonSlurper JSONSlurper = new JsonSlurper();
   ResultSet resultMap = new ResultSet();
   String result = null;
   boolean impersonateSuccess = false;
   String filesImported = '{"files":[]}';
   try {
      filesImported = icmUtilsAdv.importChangesSet(inputStream);
   } catch (net.gmc.icmjava.exception.IcmChangeSetImportException e) {
      println("Exception on import occurred ${e.getMessage()}");
      result = "Exception on import occurred ${e.getMessage()}";
      String changeSetId = getChangeSetIdFromException(e.getMessage());
      if (e.getMessage().contains("CHANGE_SET_EXISTS") && overWrite && changeSetId != null) {
         try {
            icmUtilsAdv.removeChangeSet(changeSetId);
            inputStream = new ByteArrayInputStream(hexData);
            filesImported = icmUtilsAdv.importChangesSet(inputStream);
            result = null;
         } catch (net.gmc.icmjava.exception.IcmChangeSetImportException e1) {
            println("Now got exception ${e1.getMessage()}");
            result = "Now got exception ${e1.getMessage()}";
         } catch (net.gmc.icmjava.exception.ResponseCodeIcmJavaException e2) {
            println("Now got exception ${e2.getMessage()}");
            result = "Now got exception ${e2.getMessage()}";
         }
      }
   }

   if (result != null) {
      ResultSetDetail resultSetDetail = new ResultSetDetail();
      resultSetDetail.result = result;
      resultMap.results.add(resultSetDetail);
   }
   def resultMapJson = JSONSlurper.parseText(filesImported);
   println(JsonOutput.prettyPrint(JsonOutput.toJson(resultMapJson)).stripIndent());
   
   // Go through the report and handle each file
   resultMapJson.files.each { file ->
      String filePath = file.path;
      String fileName = filePath.split("/")[-1];
      String table="";
      println("File path: $filePath");
      ResultSetDetail resultSetDetail1 = new ResultSetDetail();
      resultSetDetail1.result = "File path: $filePath";
      resultMap.results.add(resultSetDetail1);
      if (filePath.startsWith("DatabaseTables/")) {
         if (fileName.count('.') == 2){
         def parts =fileName.split("\\.");
         table = parts[0] + "." + parts[1];
         }
         else
         {
         table = fileName.split("\\.")[0];
         }
         println("Job submit:$table");
         ResultSetDetail resultSetDetail = new ResultSetDetail();
         resultSetDetail.result = """Table updated:$table 
         ***Verify the table to ensure the update has gone through successfully***""";
         resultMap.results.add(resultSetDetail);
         if (!(table.toLowerCase() in ["batchmaster", "communication", "scheduleoperationextention", "templateoperationextension"])) {
         if(table.startsWith("report"))
         {
         server.submitJob("WF002_QUEU_DbConfig_report", ["config-database-table": table, "config-icm-filepath": "icm:V:${file.importedVersion}//${file.path}", "config-database": "Corresp", "config-file-delimiter": "tab"]);
         }
         else{
            server.submitJob("WF002_QUEU_DbConfig", ["config-database-table": table, "config-icm-filepath": "icm:V:${file.importedVersion}//${file.path}", "config-database": "Corresp", "config-file-delimiter": "tab"]);
         }
         }
      } else if (filePath.startsWith("AdminResources/DesignerWorkflows/")) {
         String icmPath = fileName.split("\\.")[0];
         ResultSetDetail resultSetDetail = new ResultSetDetail();
         resultSetDetail.result = "Generated DC:$icmPath";
         resultMap.results.add(resultSetDetail);
         server.submitJob("WF002_QUEU_GenerateHTMLFromDC", ["config-icm-filepath": icmPath]);
      } else if (filePath.startsWith("Interactive/Sunsuper/Resources/Images/EMAIL_HOSTED_IMAGES")) {
         ResultSetDetail resultSetDetail = new ResultSetDetail();
         resultSetDetail.result = "Published email image:$fileName";
         resultMap.results.add(resultSetDetail);
         publish(file, fileName);
      } else {
         def states = file.approvalStates;
         boolean isProduction = false;
         if (states != null) {
            states.each { state ->
               if (state.name == "Production") isProduction = true;
            }
         }
         if (forceApprovalStateUpdate && isProduction) {
            try {
               ResultSetDetail resultSetDetail = new ResultSetDetail();
               resultSetDetail.result = "Adjusting Validity on file:${file.path} for file version:${file.importedVersion}";
               resultMap.results.add(resultSetDetail);

               icmUtils.setApprovalState("Production", file.path, file.importedVersion, new Date());
            } catch (Exception e) {
               ResultSetDetail errorDetail = new ResultSetDetail();
               errorDetail.result = "Error setting approval state: ${e.getMessage()}";
               resultMap.results.add(errorDetail);
            }
         }
      }
   }
   return resultMap;
}

/******************* Process UserResponse **************************/
def processAndSaveJson(data, fullSavePath) {
   def newJson = [
           Packagedby: job."CorrelationId",
           SelectedImpact: data.SelectedImpact,
           Questions     : data.Questions.findAll { it.SelectedQuestion || it.SelectedResponse }.collect {
              [
                      SelectedQuestion: it.SelectedQuestion,
                      SelectedResponse: it.SelectedResponse
              ]
           }
   ];

   def saveJson = JsonOutput.prettyPrint(JsonOutput.toJson(newJson));

   def saveFile = new File(fullSavePath);
   saveFile.setText(saveJson);
}

/************************* Publish the image File ****************************/
void publish(Map file, String name) {
   try {
      CloudBlobClient blobClient = new CloudBlobClient(new URI(server.getAttribute("cdn-blob-uri")), new StorageCredentialsSharedAccessSignature(server.getAttribute("cdn-sas-token")))
      def container = blobClient.getContainerReference(server.getAttribute("cdn-container"));
      String publishLabel = ((file.labels != null && file.labels.size() > 0) ? file.labels[0] : null);
      println("File:$name, PublishLabel:$publishLabel");
      if (publishLabel != null && isValidFormat(name.split("\\.")[-1])) {
         String filename = name.split("\\.")[0] + "_" + publishLabel + "." + name.split("\\.")[-1];
         CloudBlockBlob blob = container.getBlockBlobReference(filename);
         if (blob.exists() && !forceUpdate) {
            println("$filename exists already");
         } else {
            InputStream inputStream = icmUtils.readIcmFile("icm:V:${file.importedVersion}//${file.path}");
            blob.upload(inputStream, inputStream.available());
            println("uploaded $filename");
         }
      }
   } catch (Exception e) {
      println("Exception $e");
   }
}

/******************* Only publish if extension is used for email images **************************/
boolean isValidFormat(String ext) {
   String extension = ext.toLowerCase();
   def validFormats = ["png", "pdf", "jpg", "jpeg", "bmp", "gif", "tif"];
   return extension in validFormats;
}

/******************* decrypt password **************************/
String decryptPass(String cipherText) {
   byte[] cipherData = Base64.getDecoder().decode(cipherText);
   byte[] saltData = Arrays.copyOfRange(cipherData, 8, 16);

   MessageDigest md5 = MessageDigest.getInstance("MD5");
   byte[][] keyAndIV = GenerateKeyAndIV(32, 16, 1, saltData, secret.getBytes(StandardCharsets.UTF_8), md5);
   SecretKeySpec key = new SecretKeySpec(keyAndIV[0], "AES");
   IvParameterSpec iv = new IvParameterSpec(keyAndIV[1]);

   byte[] encrypted = Arrays.copyOfRange(cipherData, 16, cipherData.length);
   Cipher aesCBC = Cipher.getInstance("AES/CBC/PKCS5Padding");
   aesCBC.init(Cipher.DECRYPT_MODE, key, iv);
   byte[] decryptedData = aesCBC.doFinal(encrypted);
   return new String(decryptedData, StandardCharsets.UTF_8);
}

byte[][] GenerateKeyAndIV(int keyLength, int ivLength, int iterations, byte[] salt, byte[] password, MessageDigest md) {
   int digestLength = md.getDigestLength();
   int requiredLength = (keyLength + ivLength + digestLength - 1) / digestLength * digestLength;
   byte[] generatedData = new byte[requiredLength];
   int generatedLength = 0;
   try {
      md.reset();
      while (generatedLength < keyLength + ivLength) {
         if (generatedLength > 0)
            md.update(generatedData, generatedLength - digestLength, digestLength);
         md.update(password);
         if (salt != null)
            md.update(salt, 0, 8);
         md.digest(generatedData, generatedLength, digestLength);
         for (int i = 1; i < iterations; i++) {
            md.update(generatedData, generatedLength, digestLength);
            md.digest(generatedData, generatedLength, digestLength);
         }
         generatedLength += digestLength;
      }
      byte[][] result = new byte[2][];
      result[0] = Arrays.copyOfRange(generatedData, 0, keyLength);
      if (ivLength > 0)
         result[1] = Arrays.copyOfRange(generatedData, keyLength, keyLength + ivLength);

      return result;

   } catch (DigestException e) {
      throw new RuntimeException(e);
   } finally {
      // Clean out temporary data
      Arrays.fill(generatedData, (byte) 0);
   }
}

/************************* Extract changeSetId from exception the image File ****************************/
String getChangeSetIdFromException(String input) {
   String result = null;
   def typePattern = /relatedResource\=(.*)\(([A-Z0-9]*)\)/;
   def match = input =~ typePattern;
   if (match.find()) {
      println("Group 1= ${match.group(1).trim()}, Group 2 = ${match.group(2)}");
      result = match.group(2);
   }
   return result;
}

/************************* Convert HTML to Jira formatted text ****************************/
def convertHtmlToJiraText(String htmlContent) {
   return htmlContent
           .replaceAll(/<b>(.*?)<\/b>/, '*$1*')
           .replaceAll(/<h3>(.*?)<\/h3>/, '*$1*')
           .replaceAll(/<a href="(.*?)">(.*?)<\/a>/, '[$2|$1]')
           .replaceAll(/<br>/, '\n')
           .replaceAll(/<\/?p>/, '\n')
           .replaceAll(/<\/?[^>]+>/, '')
           .trim();
}

/************************* Mask changeSets returned ****************************/
boolean fitsMask(String name, String maskString) {
   String typePattern = "^${maskString.replace('.', '[.]').replace('*', '.*').replace('?', '.')}\$";
   def match = name =~ typePattern;

   return match.find();
}

/****************************** Classes used to return results **********************************/
@Canonical
class ResourceClassification {
   String Location = "";
   String Order = "";
   String ComponentType = "";
   String DisplayColour = "";
}

@Canonical
class ChangeSets {
   List<ChangeSetDetail> changeSets = new ArrayList<ChangeSetDetail>();
   String resultFailure = "";
   String environment = server."Environment";
}

@Canonical
class ChangeSetDetail {
   String name = "";
   String id = "";
   Boolean open = false;
   Boolean closed = false;
   Boolean approved = false;
   Boolean rejected = false;
   String description = "";
   Boolean selected = false;
}

@Canonical
class ResultSet {
   List<ResultSetDetail> results = new ArrayList<ResultSetDetail>();
}

@Canonical
class ResultSetDetail {
   String result = "";
   String Order = "";
   String Version = "";
   String ComponentType = "";
   String DisplayColour = "";
   String description = "";
}

@Canonical
class ExportChangeSets {
   List<ExportChangeSetDetail> exports = new ArrayList<ExportChangeSetDetail>();
   List<ChangeSetDetail> changeSets;
   Zip zip = new Zip();
}

@Canonical
class Zip {
   String fileName;
   String data;
   String exportLocation;
}

@Canonical
class ExportChangeSetDetail {
   String changeSetName = "";
   String fileName = "";
   String message = "";
   String exportData = "";
   Integer numberOfFiles = 0;
}

@Canonical
class Environments {
   List<EnvironmentDetails> environments = new ArrayList<EnvironmentDetails>();
   String user = "";
   String currentEnvironment = "";
}

@Canonical
class EnvironmentDetails {
   String name = "";
   String host = "inspire-<env->icm.sunqld.com.au";
   Integer port = 30353;
}

@Canonical
class ExportEnvironmentWrap {
   ExportEnvironment exportEnvironmentResult = new ExportEnvironment();
}

@Canonical
class ExportEnvironment {
   String message = "";
   String fileName = "";
   String exportData = "";
}

@Canonical
class ImportEnvironmentWrap {
   String importEnvironmentResult = "";
}

/****************************** Classes used for input **********************************/
@Canonical
class RemoteEnv {
   RemoteEnvDetail remote = new RemoteEnvDetail();
}

@Canonical
class RemoteEnvDetail {
   Boolean enabled = false;
   String host = "inspire-<env>-icm.sunqld.com.au";
   Integer port = 30353;
   String user;
   String password;
}